# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PlacetelAPI.Model.SipUser do
  @moduledoc """
  SipUser model
  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :sipuid,
    :username,
    :password,
    :domain,
    :name,
    :description,
    :did,
    :callerid,
    :type,
    :webuser_id,
    :webuser,
    :automatic_prefix,
    :blocked_prefixes,
    :routing_plan_id,
    :online,
    :registrations,
    :contact_speeddialing,
    :p_asserted_identity,
    :hotdesk_login,
    :hotdesk_pin,
    :hotdesk_type,
    :hotdesk_provisioning_id,
    :updated_at,
    :created_at
  ]

  @type t :: %__MODULE__{
          :id => integer() | nil,
          :sipuid => String.t() | nil,
          :username => String.t() | nil,
          :password => String.t() | nil,
          :domain => String.t() | nil,
          :name => String.t() | nil,
          :description => String.t() | nil,
          :did => integer() | nil,
          :callerid => String.t() | nil,
          :type => String.t() | nil,
          :webuser_id => integer() | nil,
          :webuser => PlacetelAPI.Model.User.t() | nil,
          :automatic_prefix => String.t() | nil,
          :blocked_prefixes => String.t() | nil,
          :routing_plan_id => integer() | nil,
          :online => boolean() | nil,
          :registrations => String.t() | nil,
          :contact_speeddialing => boolean() | nil,
          :p_asserted_identity => String.t() | nil,
          :hotdesk_login => String.t() | nil,
          :hotdesk_pin => String.t() | nil,
          :hotdesk_type => String.t() | nil,
          :hotdesk_provisioning_id => String.t() | nil,
          :updated_at => DateTime.t() | nil,
          :created_at => DateTime.t() | nil
        }
end

defimpl Poison.Decoder, for: PlacetelAPI.Model.SipUser do
  import PlacetelAPI.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:webuser, :struct, PlacetelAPI.Model.User, options)
  end
end
