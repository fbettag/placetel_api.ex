# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PlacetelAPI.Api.CallCenter do
  @moduledoc """
  API calls for all endpoints tagged `CallCenter`.
  """

  alias PlacetelAPI.Connection
  import PlacetelAPI.RequestBuilder

  @doc """
  Fetch all call center agents
  Provides a list of all call center agents

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page of results to fetch.
    - `:per_page` (integer()): Number of results to return per page.

  ### Returns

  - `{:ok, [%CallCenterAgent{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_call_center_agents(Tesla.Env.client(), keyword()) ::
          {:ok, list(PlacetelAPI.Model.CallCenterAgent.t())} | {:error, Tesla.Env.t()}
  def get_call_center_agents(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/call_center_agents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%PlacetelAPI.Model.CallCenterAgent{}]}
    ])
  end

  @doc """
  Fetch all call center calls
  Provides a list of all call center calls

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `date` (Date.t): YYYY-MM-DD
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page of results to fetch.
    - `:per_page` (integer()): Number of results to return per page.

  ### Returns

  - `{:ok, [%CallCenterCall{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_call_center_calls(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, list(PlacetelAPI.Model.CallCenterCall.t())} | {:error, Tesla.Env.t()}
  def get_call_center_calls(connection, date, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/call_center_calls")
      |> add_param(:query, :date, date)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%PlacetelAPI.Model.CallCenterCall{}]}
    ])
  end

  @doc """
  Fetch all call center queues
  Provides a list of all call center queues

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page of results to fetch.
    - `:per_page` (integer()): Number of results to return per page.

  ### Returns

  - `{:ok, [%CallCenterQueue{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_call_center_queues(Tesla.Env.client(), keyword()) ::
          {:ok, list(PlacetelAPI.Model.CallCenterQueue.t())} | {:error, Tesla.Env.t()}
  def get_call_center_queues(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/call_center_queues")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%PlacetelAPI.Model.CallCenterQueue{}]}
    ])
  end

  @doc """
  Create an agent
  Create a new agent

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `call_center_agents` (PostCallCenterAgents): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.CallCenterAgent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_call_center_agents(
          Tesla.Env.client(),
          PlacetelAPI.Model.PostCallCenterAgents.t(),
          keyword()
        ) :: {:ok, PlacetelAPI.Model.CallCenterAgent.t()} | {:error, Tesla.Env.t()}
  def post_call_center_agents(connection, call_center_agents, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/call_center_agents")
      |> add_param(:body, :body, call_center_agents)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %PlacetelAPI.Model.CallCenterAgent{}}
    ])
  end

  @doc """
  Create a queue
  Create a queue

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `call_center_queues` (PostCallCenterQueues): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.CallCenterQueue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_call_center_queues(
          Tesla.Env.client(),
          PlacetelAPI.Model.PostCallCenterQueues.t(),
          keyword()
        ) :: {:ok, PlacetelAPI.Model.CallCenterQueue.t()} | {:error, Tesla.Env.t()}
  def post_call_center_queues(connection, call_center_queues, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/call_center_queues")
      |> add_param(:body, :body, call_center_queues)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %PlacetelAPI.Model.CallCenterQueue{}}
    ])
  end

  @doc """
  Update an agent
  Update an agent by its ID

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): Sip user ID
  - `call_center_agents` (PutCallCenterAgents): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.CallCenterAgent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_call_center_agents_id(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PutCallCenterAgents.t(),
          keyword()
        ) :: {:ok, PlacetelAPI.Model.CallCenterAgent.t()} | {:error, Tesla.Env.t()}
  def put_call_center_agents_id(connection, id, call_center_agents, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/call_center_agents/#{id}")
      |> add_param(:body, :body, call_center_agents)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.CallCenterAgent{}}
    ])
  end

  @doc """
  Update a queue
  Update a queue

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): Queue ID
  - `call_center_queues` (PutCallCenterQueues): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.CallCenterQueue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_call_center_queues_id(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PutCallCenterQueues.t(),
          keyword()
        ) :: {:ok, PlacetelAPI.Model.CallCenterQueue.t()} | {:error, Tesla.Env.t()}
  def put_call_center_queues_id(connection, id, call_center_queues, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/call_center_queues/#{id}")
      |> add_param(:body, :body, call_center_queues)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.CallCenterQueue{}}
    ])
  end
end
