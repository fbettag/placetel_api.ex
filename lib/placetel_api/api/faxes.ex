# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PlacetelAPI.Api.Faxes do
  @moduledoc """
  API calls for all endpoints tagged `Faxes`.
  """

  alias PlacetelAPI.Connection
  import PlacetelAPI.RequestBuilder

  @doc """
  Delete a fax
  Delete a fax by its ID

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): Fax ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_faxes_id(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_faxes_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/faxes/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch in- and outbound faxes
  Provides a list of all faxes

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"filter[type]"` (String.t): 
    - `:"filter[from_number]"` (String.t): 
    - `:"filter[to_number]"` (String.t): 
    - `:order` (String.t): 
    - `:page` (integer()): Page of results to fetch.
    - `:per_page` (integer()): Number of results to return per page.

  ### Returns

  - `{:ok, [%Fax{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_faxes(Tesla.Env.client(), keyword()) ::
          {:ok, list(PlacetelAPI.Model.Fax.t())} | {:error, Tesla.Env.t()}
  def get_faxes(connection, opts \\ []) do
    optional_params = %{
      :"filter[type]" => :query,
      :"filter[from_number]" => :query,
      :"filter[to_number]" => :query,
      :order => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/faxes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%PlacetelAPI.Model.Fax{}]}
    ])
  end

  @doc """
  Fetch specific fax
  Fetch in- or outbound fax

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): Fax ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.Fax.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_faxes_id(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, PlacetelAPI.Model.Fax.t()} | {:error, Tesla.Env.t()}
  def get_faxes_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/faxes/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.Fax{}}
    ])
  end

  @doc """
  Create outbound fax
  Sends faxes via API call

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `faxes` (PostFaxes): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.Fax.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_faxes(Tesla.Env.client(), PlacetelAPI.Model.PostFaxes.t(), keyword()) ::
          {:ok, PlacetelAPI.Model.Fax.t()} | {:error, Tesla.Env.t()}
  def post_faxes(connection, faxes, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/faxes")
      |> add_param(:body, :body, faxes)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %PlacetelAPI.Model.Fax{}}
    ])
  end
end
