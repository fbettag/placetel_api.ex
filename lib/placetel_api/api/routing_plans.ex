# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PlacetelAPI.Api.RoutingPlans do
  @moduledoc """
  API calls for all endpoints tagged `RoutingPlans`.
  """

  alias PlacetelAPI.Connection
  import PlacetelAPI.RequestBuilder

  @doc """
  Delete a routing plan
  Delete a routing plan

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.RoutingPlan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_routing_plans_id(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, PlacetelAPI.Model.RoutingPlan.t()} | {:error, Tesla.Env.t()}
  def delete_routing_plans_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/routing_plans/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.RoutingPlan{}}
    ])
  end

  @doc """
  Get all routing plans
  Provides a list of routing plans

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page of results to fetch.
    - `:per_page` (integer()): Number of results to return per page.

  ### Returns

  - `{:ok, [%RoutingPlan{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_routing_plans(Tesla.Env.client(), keyword()) ::
          {:ok, list(PlacetelAPI.Model.RoutingPlan.t())} | {:error, Tesla.Env.t()}
  def get_routing_plans(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/routing_plans")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%PlacetelAPI.Model.RoutingPlan{}]}
    ])
  end

  @doc """
  Get a routing plan
  Get a routing plans

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (String.t): ID of a routing plan
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.RoutingPlan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_routing_plans_id(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, PlacetelAPI.Model.RoutingPlan.t()} | {:error, Tesla.Env.t()}
  def get_routing_plans_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/routing_plans/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.RoutingPlan{}}
    ])
  end

  @doc """
  Simulate the usage of a routing plan
  Simulate the usage of a routing plan

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (String.t): The ID of the routing plan
  - `opts` (keyword): Optional parameters
    - `:time` (DateTime.t): The time at which the simulated call would happen

  ### Returns

  - `{:ok, PlacetelAPI.Model.RoutingPlan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_routing_plans_id_simulate(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, PlacetelAPI.Model.RoutingPlan.t()} | {:error, Tesla.Env.t()}
  def get_routing_plans_id_simulate(connection, id, opts \\ []) do
    optional_params = %{
      :time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/routing_plans/#{id}/simulate")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.RoutingPlan{}}
    ])
  end

  @doc """
  Create a routing plan
  Create a routing plan

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `routing_plans` (PostRoutingPlans): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.RoutingPlan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_routing_plans(Tesla.Env.client(), PlacetelAPI.Model.PostRoutingPlans.t(), keyword()) ::
          {:ok, PlacetelAPI.Model.RoutingPlan.t()} | {:error, Tesla.Env.t()}
  def post_routing_plans(connection, routing_plans, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/routing_plans")
      |> add_param(:body, :body, routing_plans)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %PlacetelAPI.Model.RoutingPlan{}}
    ])
  end

  @doc """
  Update a routing plan
  Update a routing plan

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `id` (integer()): 
  - `routing_plans` (PutRoutingPlans): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PlacetelAPI.Model.RoutingPlan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_routing_plans_id(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PutRoutingPlans.t(),
          keyword()
        ) :: {:ok, PlacetelAPI.Model.RoutingPlan.t()} | {:error, Tesla.Env.t()}
  def put_routing_plans_id(connection, id, routing_plans, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/routing_plans/#{id}")
      |> add_param(:body, :body, routing_plans)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %PlacetelAPI.Model.RoutingPlan{}}
    ])
  end
end
