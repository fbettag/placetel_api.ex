# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PlacetelAPI.Api.CTI do
  @moduledoc """
  API calls for all endpoints tagged `CTI`.
  """

  alias PlacetelAPI.Connection
  import PlacetelAPI.RequestBuilder

  @doc """
  Get config params
  Get config params

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `params` ([String.t]): 
  - `mac` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_cti_mac(Tesla.Env.client(), list(String.t()), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def get_cti_mac(connection, params, mac, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cti/#{mac}")
      |> add_param(:query, :params, params)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Answer
  This method allows device to answer a ringing call with given call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_answer` (PostCtiMacAnswer): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_answer(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacAnswer.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_answer(connection, mac, cti_mac_answer, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/answer")
      |> add_param(:body, :body, cti_mac_answer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Blind transfer
  This method allows to do a blind tranfser on the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_blind_transfer` (PostCtiMacBlindTransfer): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_blind_transfer(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacBlindTransfer.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_blind_transfer(connection, mac, cti_mac_blind_transfer, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/blind_transfer")
      |> add_param(:body, :body, cti_mac_blind_transfer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Complete conference
  This method allows to complete conference on the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_complete_conference` (PostCtiMacCompleteConference): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_complete_conference(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacCompleteConference.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_complete_conference(connection, mac, cti_mac_complete_conference, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/complete_conference")
      |> add_param(:body, :body, cti_mac_complete_conference)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Complete transfer
  This method allows to initiate the tranfser on the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_complete_transfer` (PostCtiMacCompleteTransfer): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_complete_transfer(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacCompleteTransfer.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_complete_transfer(connection, mac, cti_mac_complete_transfer, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/complete_transfer")
      |> add_param(:body, :body, cti_mac_complete_transfer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Decline
  This method allows device to Decline the call specified by the call_id. 

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_decline` (PostCtiMacDecline): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_decline(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacDecline.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_decline(connection, mac, cti_mac_decline, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/decline")
      |> add_param(:body, :body, cti_mac_decline)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Dial
  This method initiates a new call.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_dial` (PostCtiMacDial): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_dial(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacDial.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_dial(connection, mac, cti_mac_dial, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/dial")
      |> add_param(:body, :body, cti_mac_dial)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Dial digit
  This method initiates a new call.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_dial_digit` (PostCtiMacDialDigit): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_dial_digit(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacDialDigit.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_dial_digit(connection, mac, cti_mac_dial_digit, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/dial_digit")
      |> add_param(:body, :body, cti_mac_dial_digit)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Hangup
  This method allows device to end the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_hangup` (PostCtiMacHangup): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_hangup(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacHangup.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_hangup(connection, mac, cti_mac_hangup, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/hangup")
      |> add_param(:body, :body, cti_mac_hangup)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Hold
  This method allows device to hold the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_hold` (PostCtiMacHold): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_hold(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacHold.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_hold(connection, mac, cti_mac_hold, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/hold")
      |> add_param(:body, :body, cti_mac_hold)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Resume
  This method allows device to resume the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_resume` (PostCtiMacResume): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_resume(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacResume.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_resume(connection, mac, cti_mac_resume, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/resume")
      |> add_param(:body, :body, cti_mac_resume)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Send DTMF Digits
  This method allows to sendDTMFDigits on a current active call.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_send_dtmf_digits` (PostCtiMacSendDtmfDigits): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_send_dtmf_digits(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacSendDtmfDigits.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_send_dtmf_digits(connection, mac, cti_mac_send_dtmf_digits, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/send_dtmf_digits")
      |> add_param(:body, :body, cti_mac_send_dtmf_digits)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Start conference
  This method allows to initiate conference on the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_start_conference` (PostCtiMacStartConference): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_start_conference(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacStartConference.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_start_conference(connection, mac, cti_mac_start_conference, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/start_conference")
      |> add_param(:body, :body, cti_mac_start_conference)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Start transfer
  This method allows to initiate the tranfser on the call specified by the call_id.

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti_mac_start_transfer` (PostCtiMacStartTransfer): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_cti_mac_start_transfer(
          Tesla.Env.client(),
          integer(),
          PlacetelAPI.Model.PostCtiMacStartTransfer.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def post_cti_mac_start_transfer(connection, mac, cti_mac_start_transfer, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/cti/#{mac}/start_transfer")
      |> add_param(:body, :body, cti_mac_start_transfer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Set config params
  Set config params

  ### Parameters

  - `connection` (PlacetelAPI.Connection): Connection to server
  - `mac` (integer()): 
  - `cti` (PutCti): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_cti_mac(Tesla.Env.client(), integer(), PlacetelAPI.Model.PutCti.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def put_cti_mac(connection, mac, cti, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cti/#{mac}")
      |> add_param(:body, :body, cti)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
